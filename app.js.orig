/**
 * Module dependencies.
 */
var express = require('express')
    , io = require('socket.io')
    , http = require('http')
    , twitter = require('ntwitter')
    , cronJob = require('cron').CronJob
    , _ = require('underscore')
    , path = require('path');
// MongoDB
//var mongo = require('mongodb');
//var monk = require('monk');
//var db = monk('localhost:27017/resa_tweets');
//DBpedia Spotlight
var spotlight = require('./spotlight.js');
//Create an express app
var app = express();

//Create the HTTP server with the express app as an argument
var server = http.createServer(app);


// Twitter symbols array
var watchSymbols = ['Twitter'];
if(process.argv[2]){
    watchSymbols = [process.argv[2]];
}

//This structure will keep the total number of tweets received and a map of all the symbols and how many tweets received of that symbol
var watchList = {
    search_for:watchSymbols,
    total: 0,
    recent_tweets:[],
    symbols: {}
};

//Set the watch symbols to zero.
//_.each(watchSymbols, function(v) { watchList.symbols[v] = {count:1}; });

//Generic Express setup
app.set('port', process.env.PORT || 5555);
app.set('views', __dirname + '/views');
app.set('view engine', 'jade');
app.use(express.logger('dev'));
//app.use(express.bodyParser());
app.use(express.urlencoded());
app.use(express.methodOverride());
app.use(app.router);
app.use(require('stylus').middleware(__dirname + '/public'));
app.use(express.static(path.join(__dirname, 'public')));

//We're using bower components so add it to the path to make things easier
app.use('/components', express.static(path.join(__dirname, 'components')));

// development only
if ('development' == app.get('env')) {
    app.use(express.errorHandler());
}

//Our only route! Render it with the current watchList
app.get('/', function(req, res) {
    res.render('index', { data: watchList });
});

//Start a Socket.IO listen
var sockets = io.listen(server);
//Set the sockets.io configuration.
//THIS IS NECESSARY ONLY FOR HEROKU!
/*
 sockets.configure(function() {
 sockets.set('transports', ['xhr-polling']);
 sockets.set('polling duration', 10);
 });
 */

var getEntityType=function(types_str){
    if(types_str==''){
        return 'Misc';
    }
    var tmp,out='',types_arr=types_str.split(',');
    _.each(types_arr, function(v) {
        tmp=v.split(':');
        if(tmp[0]=='Schema'){
            out= tmp[1];
        }
    })
    if(out){
        return out;
    }else{
        return 'Misc';
    }

}

//If the client just connected, give them fresh data!
sockets.sockets.on('connection', function(socket) {
    socket.emit('data', watchList);
});

//Instantiate the twitter component
//You will need to get your own key. Don't worry, it's free. But I cannot provide you one
//since it will instantiate a connection on my behalf and will drop all other streaming connections.
//Check out: https://dev.twitter.com/
var t = new twitter({
    consumer_key: 'J6DpFR0kiehJ6homJYXrzQ',           // <--- FILL ME IN
    consumer_secret: 'UFLbL5zNI8U94DQPerUbFjaiIuESecOvdDICzeN6vE',        // <--- FILL ME IN
    access_token_key: '8910152-vnEKzNFXNriioT6YMQfSZdB6uiW7DfVbdTcPg8ea3H',       // <--- FILL ME IN
    access_token_secret: 'AXXIirHdZhHOic31f48Pe3ki39jYhZPhF11gcGzmI8hCv'     // <--- FILL ME IN
});

var send_data=0;
// //Tell the twitter API to filter on the watchSymbols
t.stream('statuses/filter', { track: watchSymbols }, function(stream) {

    //We have a connection. Now watch the 'data' event for incomming tweets.
    stream.on('data', function(tweet) {
        send_data=1;
        var tweet_text=tweet.text;
        //Make sure it was a valid tweet
        if (tweet_text !== undefined) {

            spotlight.sendRequest(tweet_text,function(output){
                console.log('*********************************');
                console.log(tweet_text);
                if(output.Resources !=undefined){
                    //store tweets on DB
                    // db.get('tweetscollection').insert({"tweet_id":tweet.id,"user_name":tweet.user.screen_name,"created_at":tweet.created_at,"place":tweet.place,"processed":output});
                    //console.log(output);
                    _.each(output.Resources, function(v) {
                        //do not count search keywords
                        if(!_.contains(watchSymbols, v['@surfaceForm'])){
                            //console.log(v['@surfaceForm']+' => '+v['@URI']);
                            if(watchList.symbols[v['@surfaceForm']] ==undefined ){
                                watchList.symbols[v['@surfaceForm']] = {count:1,type:getEntityType(v['@types']), uri:v['@URI']};
                                console.log('------>'+v['@surfaceForm']);
                                //console.log('------>type: '+getEntityType(v['@types']));
                            }else{
                                watchList.symbols[v['@surfaceForm']].count++;
                                //Increment total
                                watchList.total++;
                                //console.log(watchList);
                            }
                            tweet_text=tweet_text.replace(v['@surfaceForm'],'&nbsp;<span resource="'+v['@URI']+'" class="r_entity">'+v['@surfaceForm']+'</span>&nbsp;');
                        }
                    });
                    //Send to all the clients
                    watchList.recent_tweets.push({text:tweet_text,date:tweet.created_at});
                    //watchList.current_tweet.text=tweet.text;
                    //watchList.current_tweet.date=tweet.created_at;
                }
            })
        }
    });
});
//acts as a buffer to slow down emiting results
setInterval(function(){
    //TODO:delete low level nodes when we get a huge amount of links
    if(send_data){
        sockets.sockets.emit('data', watchList);
        watchList.recent_tweets=[];
        send_data=0;
    }

},1500)
//Reset everything on a new day!
//We don't want to keep data around from the previous day so reset everything.
new cronJob('0 0 0 * * *', function(){
    //Reset collection
    //db.get('tweetscollection').drop();

    //Reset the total
    watchList.total = 0;

    //Clear out everything in the map
    _.each(watchSymbols, function(v) { watchList.symbols[v] = {}; });

    //Send the update to the clients
    sockets.sockets.emit('data', watchList);
}, null, true);

//Create the server
server.listen(app.get('port'), function(){
    console.log('Express server listening on port ' + app.get('port'));
});
